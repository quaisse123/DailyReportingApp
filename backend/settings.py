"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e)++8!h1)t&%6cge23_(d$ck=fn%)-oj3-s9!#xguo+wy5s%(9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ALLOW_ALL_ORIGINS = True 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'corsheaders',
    'api',
    'imagekit',
    'AuthApi',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}


#========================================================================================== 

# Importation du module os pour manipuler les chemins de fichiers
import os
# Importation du SDK Firebase Admin
import firebase_admin
from firebase_admin import credentials

import json

# Initialisation de Firebase selon l'environnement
if not firebase_admin._apps:
    if os.getenv("FIREBASE_CREDENTIALS"):  # Cas Render
        cred_info = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
        cred = credentials.Certificate(cred_info)
        firebase_admin.initialize_app(cred)
    else:  # Cas local
        FIREBASE_CREDENTIALS_PATH = os.path.join(BASE_DIR, 'firebase-credentials.json')
        if os.path.exists(FIREBASE_CREDENTIALS_PATH):
            cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
            firebase_admin.initialize_app(cred)


# Importation de timedelta pour définir la durée de vie des tokens JWT
from datetime import timedelta

# Configuration de Django REST Framework pour utiliser JWT et Session Authentication
REST_FRAMEWORK = {
    # Ajout des classes d'authentification JWT et Session
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Authentification par JWT
        'rest_framework.authentication.SessionAuthentication',        # Authentification par session
    ],
}

# Configuration des paramètres pour Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),      # Durée de vie du token d'accès : 1 jour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Durée de vie du token de rafraîchissement : 7 jours
    'ROTATE_REFRESH_TOKENS': True,                   # Rotation automatique des tokens de rafraîchissement
}

# Définition du modèle utilisateur personnalisé pour Django
AUTH_USER_MODEL = 'AuthApi.CustomUser'


# Configuration pour déployer l'application 
# sur render.com avec gestion des fichiers statiques via WhiteNoise
import os
import dj_database_url
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent  # Définit le répertoire racine du projet

SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-e)++8!h1)t&%6cge23_(d$ck=fn%)-oj3-s9!#xguo+wy5s%(9')  # Clé secrète, configurable via variable d'environnement

DEBUG = os.environ.get('DEBUG', 'True') == 'True'  # Mode debug, configurable via variable d'environnement

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')  # Hôtes autorisés, configurable via variable d'environnement

DATABASES = {
    'default': dj_database_url.config(default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}")  # Configuration de la base de données via URL, par défaut SQLite
}

STATIC_URL = '/static/'  # URL d'accès aux fichiers statiques
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Répertoire où collecter les fichiers statiques lors du déploiement

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',      # Middleware de sécurité
    'whitenoise.middleware.WhiteNoiseMiddleware',         # Sert les fichiers statiques en production
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # Utilise WhiteNoise pour compresser et gérer les fichiers statiques